// <auto-generated />
using System;
using MetaenlaceNet.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MetaenlaceNet.Migraciones
{
    [DbContext(typeof(EntityContext))]
    [Migration("20220408083201_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MedicoPaciente", b =>
                {
                    b.Property<long>("medicosUsuarioId")
                        .HasColumnType("bigint");

                    b.Property<long>("pacientesUsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("medicosUsuarioId", "pacientesUsuarioId");

                    b.HasIndex("pacientesUsuarioId");

                    b.ToTable("MedicoPaciente");
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Cita", b =>
                {
                    b.Property<long>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CitaId"), 1L, 1);

                    b.Property<DateTime>("fechaHora")
                        .HasColumnType("datetime2");

                    b.Property<long>("medicoUsuarioId")
                        .HasColumnType("bigint");

                    b.Property<string>("motivocita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("pacienteUsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("CitaId");

                    b.HasIndex("medicoUsuarioId");

                    b.HasIndex("pacienteUsuarioId");

                    b.ToTable("Cita", (string)null);
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Diagnostico", b =>
                {
                    b.Property<long>("DiagnosticoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("enfermedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("valoracionEspecialista")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosticoId");

                    b.ToTable("Diagnostico", (string)null);
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Usuario", b =>
                {
                    b.Property<long>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UsuarioId"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_Usuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Medico", b =>
                {
                    b.HasBaseType("MetaenlaceNet.Entity.Usuario");

                    b.ToTable("Medico", (string)null);
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Paciente", b =>
                {
                    b.HasBaseType("MetaenlaceNet.Entity.Usuario");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("MedicoPaciente", b =>
                {
                    b.HasOne("MetaenlaceNet.Entity.Medico", null)
                        .WithMany()
                        .HasForeignKey("medicosUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetaenlaceNet.Entity.Paciente", null)
                        .WithMany()
                        .HasForeignKey("pacientesUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Cita", b =>
                {
                    b.HasOne("MetaenlaceNet.Entity.Medico", "medico")
                        .WithMany("citas")
                        .HasForeignKey("medicoUsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MetaenlaceNet.Entity.Paciente", "paciente")
                        .WithMany("citas")
                        .HasForeignKey("pacienteUsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("medico");

                    b.Navigation("paciente");
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Diagnostico", b =>
                {
                    b.HasOne("MetaenlaceNet.Entity.Cita", "cita")
                        .WithOne("diagnostico")
                        .HasForeignKey("MetaenlaceNet.Entity.Diagnostico", "DiagnosticoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("cita");
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Medico", b =>
                {
                    b.HasOne("MetaenlaceNet.Entity.Usuario", null)
                        .WithOne()
                        .HasForeignKey("MetaenlaceNet.Entity.Medico", "UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Paciente", b =>
                {
                    b.HasOne("MetaenlaceNet.Entity.Usuario", null)
                        .WithOne()
                        .HasForeignKey("MetaenlaceNet.Entity.Paciente", "UsuarioId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Cita", b =>
                {
                    b.Navigation("diagnostico")
                        .IsRequired();
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Medico", b =>
                {
                    b.Navigation("citas");
                });

            modelBuilder.Entity("MetaenlaceNet.Entity.Paciente", b =>
                {
                    b.Navigation("citas");
                });
#pragma warning restore 612, 618
        }
    }
}
